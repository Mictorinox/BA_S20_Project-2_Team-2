application_train <- read.csv("~/Downloads/application_train_S20.csv")
head(application_train)
str(application_train)
install.packages("naniar")
library(naniar)
install.packages("ROSE")
library(ROSE)
#clean the data
vis_miss(application_train, warn_large_data=FALSE)

missing_percentage<-apply(application_train, 2, function(col)sum(is.na(col))/length(col))
missing_percentage[missing_percentage>0.2]
missing_percentage_df<-as.data.frame(missing_percentage[missing_percentage>0.2])
index<-rownames(missing_percentage_df)
application_train_2<- application_train[,!(names(application_train) %in% index)]

correlation_percentage<-apply(application_train_2, 2, function(col)chisq.test(application_train_2$TARGET,col)$p.value)
correlation_percentage

correlation_percentage[correlation_percentage>0.05]
correlation_df<-as.data.frame(correlation_percentage[correlation_percentage>0.05])
index<-rownames(correlation_df)
index_2<-c(index,"TARGET")
application_train_3<- application_train_2[,(names(application_train_2) %in% index_2)]
colnames(application_train_3)

application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR<-as.character(application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR)
application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR.new<-ifelse(  is.na(application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR),"NULL",application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR)
application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR.new<-as.factor(application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR.new)
table(application_train_3$AMT_REQ_CREDIT_BUREAU_HOUR.new)

application_train_3$AMT_REQ_CREDIT_BUREAU_DAY<-as.character(application_train_3$AMT_REQ_CREDIT_BUREAU_DAY)
application_train_3$AMT_REQ_CREDIT_BUREAU_DAY.new<-ifelse(  is.na(application_train_3$AMT_REQ_CREDIT_BUREAU_DAY),"NULL",application_train_3$AMT_REQ_CREDIT_BUREAU_DAY)
application_train_3$AMT_REQ_CREDIT_BUREAU_DAY.new<-as.factor(application_train_3$AMT_REQ_CREDIT_BUREAU_DAY.new)
table(application_train_3$AMT_REQ_CREDIT_BUREAU_DAY.new)

application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK<-as.character(application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK)
application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK.new<-ifelse(  is.na(application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK),"NULL",application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK)
application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK.new<-as.factor(application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK.new)
table(application_train_3$AMT_REQ_CREDIT_BUREAU_WEEK.new)
to.remove <-c("AMT_REQ_CREDIT_BUREAU_HOUR","AMT_REQ_CREDIT_BUREAU_DAY","AMT_REQ_CREDIT_BUREAU_WEEK")
application_train_4 <- application_train_3[,-which(names(application_train_3) %in% to.remove)]
application_train_4  <- na.omit(application_train_4) 
View(application_train_4)
str(application_train_4)


#check data balance
table(application_train_4$TARGET)
prop.table(table(application_train_4$TARGET))# we see uneven distributions in target variable

#balance the dataset

application_train_4$TARGET<-as.integer(application_train_4$TARGET)
application_train_4_balanced<-ovun.sample(TARGET~., data = application_train_4, p=0.4, N= 20000)$data # this runs!
table(application_train_4_balanced$TARGET)
prop.table(table(application_train_4_balanced$TARGET))

#data has been balanced



#RF MODELING. 
outcomeName <- 'TARGET'
predictorNames <- names(application_train_4)[names(application_train_4) != outcomeName&names(application_train_4) != "SK_ID_CURR"]  
# creating a list of features to be included in the model

str(application_train_4_balanced)
application_train_4_balanced$TARGET<-as.factor(application_train_4_balanced$TARGET)

set.seed(1234)  # setting seed to reproduce results of random sampling
split<-(.70)
library (caret)
index <- createDataPartition(application_train_4_balanced$TARGET, p=split, list=FALSE) # row indices for training data

train.df <- application_train_4_balanced[ index,]  # model training data
test.df<- application_train_4_balanced[ -index,]   # test data


modelLookup(model='rf')  # To find the parameters of a model that can be tuned
modelLookup(model='gbm') 



fitControl <- trainControl(method = "none")   # control parameters for training


install.packages('e1071', dependencies=TRUE)
### RF Model
rf<-train(train.df[,predictorNames],train.df[,outcomeName],
          method='rf',
          trControl=fitControl)
gbm<-train(train.df[,predictorNames],train.df[,outcomeName],
           method='gbm',
           trControl=fitControl)


# summarizing the models
rfImp<-varImp(rf)  # computes variable importance for regression and classification models
rfImp
plot(rfImp)

gbmImp<-varImp(gbm) 
gbmImp<-summary(gbm)
gbmImp
plot(gbmImp)


# measuring performance
rf.predict<-predict(rf,test.df[,predictorNames],type="raw")
confusionMatrix(rf.predict,test.df[,outcomeName])
#recall=0.861934,precision=0.6326154
#F score=2*(0.861934*0.6326154)/(0.861934+0.6326154)=0.7296818
# Accuracy = 0.6191  

gbm.predict<-predict(gbm,test.df[,predictorNames],type="raw")
confusionMatrix(gbm.predict,test.df[,outcomeName])
#recall=0.9577977,precision=0.6050494
#F Score=2*(0.9577977*0.6050494)/(0.9577977+0.6050494)=0.7416144
#Accuracy : 0.6019  
